import React, { FC } from "react";
import {
  CardScroll,
  Cell,
  Div,
  Group,
  Header,
  Panel,
  PanelHeader,
  PanelHeaderBack,
  PanelHeaderButton,
  PanelHeaderContent,
} from "@vkontakte/vkui";
import { useLocation, useParams, useRouter } from "@unexp/router";
import { DefaultPageProps } from "../../helpers/types";
import commandsService from "../../services/CommandsService";
import { Icon28AddOutline } from "@vkontakte/icons";
import CommandHelper from "../../helpers/commands/CommandHelper";
import {
  PermissionPrivateMessagesTypeEnum,
  RepeatCommandConversationEnum,
} from "../../helpers/commands/types";
import { observer } from "mobx-react-lite";

const Command: FC<DefaultPageProps> = () => {
  const { id } = useParams();
  const command = commandsService.getCommandById(id);
  const router = useRouter();
  const location = useLocation();

  const pushCommandPanel = (id: number) => {
    // fixme —Å–ø–∞—Å–∏–±–æ vk ui –∑–∞ –±–∞–≥–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–∞–Ω–µ–ª—å—é
    router
      .push(
        { panel: location.panel === "command" ? "command2" : "command" },
        { id: id }
      )
      .then();
  };

  return (
    <Panel>
      <PanelHeader
        left={<PanelHeaderBack onClick={router.back} />}
        right={
          <PanelHeaderButton>
            <Icon28AddOutline />
          </PanelHeaderButton>
        }
      >
        <PanelHeaderContent>
          {CommandHelper.getCommandFullName(id)}
        </PanelHeaderContent>
      </PanelHeader>
      <Div>
        <Group
          header={<Header>üìé –û–ø–∏—Å–∞–Ω–∏–µ</Header>}
          description={command.helpExtended}
        />
        <Group
          header={
            <Header>{`üí¨ –ù–∞–∑–≤–∞–Ω–∏—è${
              command.strictAliasMode ? " (–æ–ø–µ—á–∞—Ç–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã)" : ""
            }`}</Header>
          }
          description={command.alias.join(", ")}
        />
        <Group
          header={<Header>üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã</Header>}
          description={command.help}
        />
        <Group
          header={<Header>‚ö† –¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å</Header>}
          description={CommandHelper.getLevelText(command.accessLevel)}
        />
        {!!command.modifiers?.length && (
          <Group
            header={<Header>‚ö° –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã</Header>}
            description={
              <CardScroll>
                {command.modifiers.map((commandImplicitId) => (
                  <Cell
                    className="alternating-color"
                    key={commandImplicitId}
                    onClick={() => pushCommandPanel(commandImplicitId)}
                  >
                    {commandsService.getCommandById(commandImplicitId).alias[0]}
                  </Cell>
                ))}
              </CardScroll>
            }
          />
        )}
        {!!command.commandImplicit?.length && (
          <Group
            header={<Header>‚ö° –ù–µ—è–≤–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä</Header>}
            description={command.commandImplicit.map((commandImplicit) => (
              <>
                <Group
                  header={<Header>üí¨ –ù–∞–∑–≤–∞–Ω–∏—è</Header>}
                  description={commandImplicit.alias.join(", ")}
                />
                <Group
                  header={<Header>üìé –û–ø–∏—Å–∞–Ω–∏–µ</Header>}
                  description={commandImplicit.helpExtended}
                />
                <Group
                  header={<Header>‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</Header>}
                  description={commandImplicit.help}
                />
              </>
            ))}
          />
        )}
        {!!command.relatedCommands?.length && (
          <Group
            header={<Header>üñá –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</Header>}
            description={
              <CardScroll>
                {command.relatedCommands
                  .filter((x) => x != command.id)
                  .map((relatedCommandId) => (
                    <Cell
                      className="alternating-color"
                      key={relatedCommandId}
                      onClick={() => pushCommandPanel(relatedCommandId)}
                    >
                      {
                        commandsService.getCommandById(relatedCommandId)
                          .alias[0]
                      }
                    </Cell>
                  ))}
              </CardScroll>
            }
          />
        )}
        {command.keys?.map((key) => (
          <Group
            key={key.alias[0]}
            header={
              <Header mode="primary" multiline>
                üîë {key.alias.join(", ")}
              </Header>
            }
            description={key.description}
          />
        ))}
        <Group
          header={<Header>üõ† –¢–∏–ø</Header>}
          description={CommandHelper.getType(command.type)}
        />
        {command.repeat === RepeatCommandConversationEnum.Yes && (
          <Group
            header={
              <Header mode="primary" multiline>
                üÜò –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –±–µ—Å–µ–¥–µ, –µ—Å–ª–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤
                –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
              </Header>
            }
          />
        )}
        {CommandHelper.isAccessLs(command.privateMessages) && (
          <Group
            header={
              <Header mode="primary" multiline>
                üëÅ –†–∞–∑—Ä–µ—à–µ–Ω–∞ –≤—Å–µ–º —Ä–æ–ª—è–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞
                {command.privateMessages ===
                PermissionPrivateMessagesTypeEnum.YesImportant
                  ? " (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
                  : ""}
              </Header>
            }
          />
        )}
        {command.notPrivateMessages && (
          <Group
            header={
              <Header mode="primary" multiline>
                üö¶ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ.
              </Header>
            }
          />
        )}
        {command.onlyPrivateMessages && (
          <Group
            header={
              <Header mode="primary" multiline>
                üö¶ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.
              </Header>
            }
          />
        )}
      </Div>
    </Panel>
  );
};

export default observer(Command);
